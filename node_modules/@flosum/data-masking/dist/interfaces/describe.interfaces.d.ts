import { AssociateEntityTypeEnum } from '../enums/describe.enums';
import { FieldType } from '../enums/field-type.enum';
export interface DescribeObject {
    actionOverrides: any;
    activateable: boolean;
    associateEntityType: AssociateEntityTypeEnum | null;
    associateParentEntity: any;
    childRelationships: any;
    compactLayoutable: boolean;
    createable: boolean;
    custom: boolean;
    customSetting: boolean;
    deepCloneable: boolean;
    defaultImplementation: boolean;
    deletable: boolean;
    deprecatedAndHidden: boolean;
    extendedBy: any;
    extendsInterfaces: any;
    feedEnabled: boolean;
    fields: DescribeField[];
    hasSubtypes: boolean;
    implementedBy: any;
    implementsInterfaces: any;
    isInterface: boolean;
    isSubtype: boolean;
    keyPrefix: string;
    label: string;
    labelPlural: string;
    layoutable: boolean;
    listviewable: any;
    lookupLayoutable: any;
    mergeable: boolean;
    mruEnabled: boolean;
    name: string;
    namedLayoutInfos: any;
    networkScopeFieldName: any;
    queryable: boolean;
    recordTypeInfos: RecordTypeInfo[];
    replicateable: boolean;
    retrieveable: boolean;
    searchLayoutable: boolean;
    searchable: boolean;
    sobjectDescribeOption: string;
    supportedScopes: any;
    triggerable: boolean;
    undeletable: boolean;
    updateable: boolean;
    urls: any;
}
export interface RecordTypeInfo {
    active: boolean;
    available: boolean;
    defaultRecordTypeMapping: boolean;
    developerName: string;
    master: boolean;
    name: string;
    recordTypeId: string;
}
export interface DescribeField {
    aggregatable: boolean;
    aiPredictionField: boolean;
    autoNumber: boolean;
    byteLength: number;
    calculated: boolean;
    calculatedFormula: any;
    cascadeDelete: boolean;
    caseSensitive: boolean;
    compoundFieldName: any;
    controllerName: any;
    createable: boolean;
    custom: boolean;
    defaultValue: any;
    defaultValueFormula: any;
    defaultedOnCreate: boolean;
    dependentPicklist: boolean;
    deprecatedAndHidden: boolean;
    digits: number;
    displayLocationInDecimal: boolean;
    encrypted: boolean;
    externalId: boolean;
    extraTypeInfo: any;
    filterable: boolean;
    filteredLookupInfo: any;
    formulaTreatNullNumberAsZero: boolean;
    groupable: boolean;
    highScaleNumber: boolean;
    htmlFormatted: boolean;
    idLookup: boolean;
    inlineHelpText: any;
    label: string;
    length: number;
    mask: any;
    maskType: any;
    name: string;
    nameField: boolean;
    namePointing: boolean;
    nillable: boolean;
    permissionable: boolean;
    picklistValues: Array<PickLickValues>;
    polymorphicForeignKey: boolean;
    precision: number;
    queryByDistance: boolean;
    referenceTargetField: any;
    referenceTo: Array<string>;
    relationshipName: string | null;
    relationshipOrder: number | null;
    restrictedDelete: boolean;
    restrictedPicklist: boolean;
    scale: number;
    searchPrefilterable: boolean;
    sortable: boolean;
    type: FieldType;
    unique: boolean;
    updateable: boolean;
    writeRequiresMasterRead: boolean;
}
export interface PickLickValues {
    active: boolean;
    defaultValue: boolean;
    label: string;
    value: string;
}
export interface Sobject {
    activateable: boolean;
    associateEntityType: any;
    associateParentEntity: any;
    createable: boolean;
    custom: boolean;
    customSetting: boolean;
    deepCloneable: boolean;
    deletable: boolean;
    deprecatedAndHidden: boolean;
    feedEnabled: boolean;
    hasSubtypes: boolean;
    isInterface: boolean;
    isSubtype: boolean;
    keyPrefix: string;
    label: string;
    labelPlural: string;
    layoutable: boolean;
    mergeable: boolean;
    mruEnabled: boolean;
    name: string;
    queryable: boolean;
    replicateable: boolean;
    retrieveable: boolean;
    searchable: boolean;
    triggerable: boolean;
    undeletable: boolean;
    updateable: boolean;
}
export interface GlobalDescribe {
    encoding: string;
    maxBatchSize: number;
    sobjects: Array<Sobject>;
}
