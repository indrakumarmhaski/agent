/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { Readable } from 'stream';
import { Bulk1JobOperation } from '../enums';
export interface SimpleDeployData {
    records: Record<string, any>[];
}
export interface BinaryContent {
    binaryFieldName: string;
    name: string;
    value: Readable;
}
export interface BinaryDeployData extends SimpleDeployData {
    binary: BinaryContent[];
}
export interface CompositeData {
    records: SFRecord[];
}
export interface CompositeBinaryData {
    records: SFRecord[];
    binary: BinaryContent[];
}
export interface CompositeDeployPayload {
    allOrNone: boolean;
    records: SFRecord[];
}
export interface RestBinaryData {
    record: Record<string, any>;
    binary: BinaryContent[];
}
export interface SFRecord extends Record<string, any> {
    attributes: {
        type: string;
        binaryPartName?: string;
        binaryPartNameAlias?: string;
    };
}
export interface DeployDataResult {
    success: boolean;
    created: boolean;
    id: string;
    error: string | null;
}
export interface DeployDataResultBulk1 {
    Success: boolean;
    Created: boolean;
    Id: string;
    Error: string;
}
export interface DeployRequest {
    instance: AxiosInstance;
    objectName: string;
    api: string;
    externalIdField?: string;
    allOrNone?: boolean;
    recordId?: string;
}
export interface DeployRequestBulk1 extends DeployRequest {
    pollInterval?: number;
    operation?: Bulk1JobOperation;
}
export interface CompositeError {
    statusCode: string;
    message: string;
    fields: string[];
}
export interface CompositeSaveResult {
    success: boolean;
    created: boolean;
    id: string;
    errors: CompositeError[];
}
