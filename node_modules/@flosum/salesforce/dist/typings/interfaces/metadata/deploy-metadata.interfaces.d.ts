import { BaseSoapCommandOptions } from '..';
import { DeployProblemType, DeployTestLevel } from '../../enums/deploy.metadata.enums';
export declare type CommandDeployMetadataSoapBody = {
    'met:deploy': {
        'met:ZipFile': string;
        'met:DeployOptions'?: CommandDeployMetadataSoapDeployOptionsBody;
    };
};
export declare type CommandDeployMetadataSoapDeployOptionsBody = {
    'met:checkOnly'?: boolean;
    'met:singlePackage'?: boolean;
    'met:allowMissingFiles'?: boolean;
    'met:autoUpdatePackage'?: boolean;
    'met:ignoreWarnings'?: boolean;
    'met:performRetrieve'?: boolean;
    'met:purgeOnDelete'?: boolean;
    'met:rollbackOnError'?: boolean;
    'met:runAllTests'?: boolean;
    'met:testLevel'?: DeployTestLevel;
    'met:runTests'?: string[];
};
export declare type CommandDeployMetadataSoapOptions = BaseSoapCommandOptions & {
    file: string;
    deployOptions?: CommandDeployMetadataSoapDeployOptions;
};
export declare type CommandDeployMetadataSoapDeployOptions = {
    checkOnly?: boolean;
    singlePackage?: boolean;
    allowMissingFiles?: boolean;
    autoUpdatePackage?: boolean;
    ignoreWarnings?: boolean;
    performRetrieve?: boolean;
    purgeOnDelete?: boolean;
    rollbackOnError?: boolean;
    runAllTests?: boolean;
    testLevel?: DeployTestLevel;
    runTests?: string[];
};
export declare type CommandDeployMetadataSoapRequestResponseResult = {
    done: boolean;
    id: string;
    state: string;
};
export declare type CommandDeployMetadataSoapRequestResponse = {
    deployResponse: {
        result: CommandDeployMetadataSoapRequestResponseResult;
    };
};
export declare type CommandDeployMetadataSoapRequestResult = CommandDeployMetadataSoapRequestResponseResult;
export declare type CheckDeployMetadataSoapStatusBody = {
    'met:checkDeployStatus': {
        'met:asyncProcessId': string;
        'met:includeDetails': boolean;
    };
};
export declare type CheckDeploySoapStatusCommandOptions = BaseSoapCommandOptions & {
    asyncProcessId: string;
    includeDetails: boolean;
};
export declare type DeployMetadataMessage = {
    changed: boolean;
    columnNumber: number;
    componentType: string;
    created: boolean;
    createdDate: string;
    deleted: boolean;
    fileName: string;
    fullName: string;
    id: string;
    lineNumber: string;
    problem: string;
    problemType: DeployProblemType;
    success: boolean;
};
export declare type DeployMetadataStatusSoapDetails = {
    runTestResult: {
        numFailures: string;
        numTestsRun: string;
        totalTime: string;
        failures?: DeployMetadataTestFailures | DeployMetadataTestFailures[];
    };
    componentFailures: DeployMetadataMessage[];
    componentSuccesses: DeployMetadataMessage[];
};
export declare type DeployMetadataTestFailures = {
    id: string;
    message: string;
    methodName: string;
    name: string;
    namespace: string;
    packageName: string;
    stackTrace: string;
    time: number;
    type: string;
};
export declare type CheckDeployMetadataStatusResult = {
    checkOnly: boolean;
    createdBy: string;
    createdByName: string;
    createdDate: string;
    details: DeployMetadataStatusSoapDetails;
    done: boolean;
    id: string;
    ignoreWarnings: boolean;
    lastModifiedDate: string;
    numberComponentErrors: string;
    numberComponentsDeployed: string;
    numberComponentsTotal: string;
    numberTestErrors: string;
    numberTestsCompleted: string;
    numberTestsTotal: string;
    rollbackOnError: boolean;
    runTestsEnabled: boolean;
    status: string;
    success: boolean;
};
export declare type CheckDeployMetadataSoapStatusRequestResponse = {
    checkDeployStatusResponse: {
        result: CheckDeployMetadataStatusResult;
    };
};
