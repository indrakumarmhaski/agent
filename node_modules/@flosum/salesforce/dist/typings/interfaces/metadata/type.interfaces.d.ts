import { ChildElementName, ParentComponentType } from '../../enums/type.metadata.enum';
export declare type ParentComponent = {
    [parentObject in ParentComponentType | string]: {
        [childElement in ChildElementName | string]: ChildElement[];
    };
};
export declare type ChildComponent = {
    [parentObject in ParentComponentType | string]: {
        [childElement in ChildElementName | string]: ChildElement;
    };
};
export declare type ChildElement = {
    fullName?: string;
    name?: string;
};
export declare type ProfileObject = {
    Profile: Profile;
};
export declare type Profile = {
    applicationVisibilities?: {
        application: string;
        default: boolean;
        visible: boolean;
    }[];
    categoryGroupVisibilities?: {
        dataCategories: string[];
        dataCategoryGroup: string;
        visibility: string;
    }[];
    classAccesses?: {
        apexClass: string;
        enabled: boolean;
    }[];
    customMetadataTypeAccesses?: {
        name: string;
        enabled: boolean;
    }[];
    customPermissions?: {
        name: string;
        enabled: boolean;
    }[];
    customSettingAccesses?: {
        name: string;
        enabled: boolean;
    }[];
    externalDataSourceAccesses?: {
        externalDataSource: string;
        enabled: boolean;
    }[];
    fieldLevelSecurities?: {
        field: string;
        editable: boolean;
        hidden: boolean;
        readable: boolean;
    }[];
    fieldPermissions?: {
        field: string;
        editable: boolean;
        hidden: boolean;
        readable: boolean;
    }[];
    flowAccesses?: {
        flow: string;
        enabled: boolean;
    }[];
    layoutAssignments?: {
        layout: string;
        recordType: string;
    }[];
    loginFlows?: {
        flow: string;
        flowtype: string;
        friendlyname: string;
        uiLoginFlowType: string;
        useLightningRuntime: boolean;
        vfFlowPage: string;
        vfFlowPageTitle: string;
    }[];
    objectPermissions?: {
        object: string;
        allowCreate: boolean;
        allowDelete: boolean;
        allowEdit: boolean;
        allowRead: boolean;
        modifyAllRecords: boolean;
        viewAllRecords: boolean;
    }[];
    pageAccesses?: {
        apexPage: string;
        enabled: boolean;
    }[];
    recordTypeVisibilities?: {
        recordType: string;
        default: boolean;
        personAccountDefault: boolean;
        visible: boolean;
    }[];
    tabVisibilities?: {
        tab: string;
        visibility: string;
    }[];
};
export declare type Bot = {
    botVersions: BotVersion[];
    fullName: string;
};
export declare type BotVersion = {
    fullName: string;
};
export declare type TranslationsObject = {
    Translations: Translations;
};
export declare type Translations = {
    bots: Bot[];
    customApplications?: {
        label: string;
        name: string;
    }[];
    customLabels?: {
        label: string;
        name: string;
    }[];
    customPageWebLinks?: {
        label: string;
        name: string;
    }[];
    customTabs?: {
        label: string;
        name: string;
    }[];
    flowDefinitions?: {
        label: string;
        fullName: string;
    }[];
    prompts?: {
        description: string;
        label: string;
        name: string;
    }[];
    quickActions?: {
        aspect: string;
        label: string;
        name: string;
    }[];
    reportTypes?: {
        label: string;
        name: string;
        description: string;
    }[];
    scontrols?: {
        label: string;
        name: string;
    }[];
};
export declare type CustomObjectTranslationObject = {
    CustomObjectTranslation: CustomObjectTranslation;
};
export declare type CustomObjectTranslation = {
    fields?: {
        description: string;
        help: string;
        label: string;
        name: string;
        relationshipLabel: string;
    };
    fieldSets?: {
        label: string;
        name: string;
    };
    layouts?: {
        layout: string;
        layoutType: string;
    };
    namedFilters?: {
        errorMessage: string;
        informationalMessage: string;
        name: string;
    };
    quickActions?: {
        aspect: string;
        label: string;
        name: string;
    };
    recordTypes?: {
        label: string;
        name: string;
        description: string;
    };
    sharingReasons?: {
        label: string;
        name: string;
    };
    validationRules?: {
        errorMessage: string;
        name: string;
    };
    webLinks?: {
        label: string;
        name: string;
    };
    workflowTasks?: {
        description: string;
        subject: string;
        name: string;
    };
};
export declare type MergeTypes = ProfileObject | CustomObjectTranslationObject | TranslationsObject;
