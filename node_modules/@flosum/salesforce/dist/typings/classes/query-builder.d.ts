import { SortDirection } from '../enums/query.enums';
import ClauseBuilder from './clause-builder';
declare type OrderItem = [string, SortDirection];
declare type QueryBuilderOptions = {
    throwOnSizeExceeded?: boolean;
    maxSize?: number;
};
/**
 * QueryBuilder is an util class which builds simple queries for Salesforce
 * @example
 * const builder = new QueryBuilder()
 *  .select('Id', 'Name')
 *  .from('Account')
 *  .where('Id >= :startId', { startId: '00PJ000000A78cnMAB' })
 *  .andWhere('Name = 'John')
 *  .limit(2000)
 *  .orderBy(['Id', SortDirection.ASC])
 *
 * const query = builder.build();
 * // SELECT Id, Name FROM Account WHERE Id >= '00PJ000000A78cnMAB' AND Name = 'John' ORDER BY Id ASC LIMIT 2000
 */
export default class QueryBuilder {
    private _fields;
    private _object;
    private _orders;
    private _limit;
    private _clauseBuilder;
    private buildOrders;
    private buildBaseSelect;
    private buildLimit;
    private buildClauses;
    hasLimit(): boolean;
    hasOrders(): boolean;
    /**
     * Specify field to select
     * @param fields a list of fields separated by comma
     * @example
     * builder.select('Id', 'Name')
     */
    select(...fields: string[]): QueryBuilder;
    /**
     * Specify object (table) to select from
     * @param object object name
     * @example
     * builder.from('Account')
     */
    from(object: string): QueryBuilder;
    /**
     * Specify a limit for records to retrieve
     * @param limit number of records to retrieve
     * @example
     * builder.limit(2000)
     */
    limit(limit: number): QueryBuilder;
    /**
     * Specify an order for records to retrieve
     * @param orders list of orders
     * @example
     * builder.order(['Id', SortDirection.ASC], ['Name', SortDirection.DESC])
     */
    order(...orders: OrderItem[]): QueryBuilder;
    where(clause: ClauseBuilder): QueryBuilder;
    where(input: string, parameters?: Record<string, any>): QueryBuilder;
    orWhere(clause: ClauseBuilder): QueryBuilder;
    orWhere(input: string, parameters?: Record<string, any>): QueryBuilder;
    andWhere(clause: ClauseBuilder): QueryBuilder;
    andWhere(input: string, parameters?: Record<string, any>): QueryBuilder;
    copy(): QueryBuilder;
    clearClause(): QueryBuilder;
    /**
     * Build an actual query from specified properties
     * @param encodeUri if true then returns encoded string to be used in requests
     * @param throwOnSizeExceeded if true then throw an exception if the query length is greater than maxSize
     * @param maxSize limit on the maximum length of a query
     * @example
     * builder.select('Id').from('Account').build() // SELECT Id FROM Account
     */
    build(encodeUri?: boolean, { throwOnSizeExceeded, maxSize }?: QueryBuilderOptions): string;
}
export {};
