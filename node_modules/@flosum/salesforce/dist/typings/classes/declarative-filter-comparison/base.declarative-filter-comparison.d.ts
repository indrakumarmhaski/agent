import { DeclarativeFilterOptions } from '../../enums/declarative-filter.enums';
import { ConvertedDeclarativeFilterValue } from '../../interfaces/declarative-filter.interfaces';
import { FieldType } from '../../enums/field-type.enum';
export declare type BaseDeclarativeFilterOptions = {
    type: FieldType;
    option: DeclarativeFilterOptions;
    filterValue: ConvertedDeclarativeFilterValue;
    recordValue: ConvertedDeclarativeFilterValue;
};
export default abstract class BaseDeclarativeFilterComparison {
    protected type: BaseDeclarativeFilterOptions['type'];
    protected option: BaseDeclarativeFilterOptions['option'];
    protected filterValue: BaseDeclarativeFilterOptions['filterValue'];
    protected recordValue: BaseDeclarativeFilterOptions['recordValue'];
    protected get baseOptions(): BaseDeclarativeFilterOptions;
    constructor({ type, option, filterValue, recordValue }: BaseDeclarativeFilterOptions);
    abstract execute(): boolean;
}
