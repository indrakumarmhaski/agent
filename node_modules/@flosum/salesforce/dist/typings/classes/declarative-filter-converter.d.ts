import { ConvertedDeclarativeFilterValue } from '../interfaces/declarative-filter.interfaces';
import { DeclarativeFilterOptions } from '../enums/declarative-filter.enums';
import { FieldType } from '../enums/field-type.enum';
export declare type ConverterDeclarativeFilterComparisonOptions = {
    type: FieldType;
    option: DeclarativeFilterOptions;
    filterValue: string;
    recordValue: string;
};
export default class DeclarativeFilterConverter {
    private readonly type;
    private readonly option;
    private readonly filterValue;
    private readonly recordValue;
    constructor({ type, option, filterValue, recordValue }: ConverterDeclarativeFilterComparisonOptions);
    convert(): {
        convertedFilterValue: ConvertedDeclarativeFilterValue;
        convertedRecordValue: ConvertedDeclarativeFilterValue;
    };
}
