import { DescribeMetadataItem, MetadataItemData } from '../../../interfaces';
import BaseListMetadata, { BaseListMetadataOptions } from './base.list-metadata';
import { MetadataType } from '../../../enums';
export declare type FolderRecord = {
    LastModifiedDate: string;
    LastModifiedById: string;
    LastModifiedBy: {
        Name: string;
    };
    CreatedById: string;
    CreatedDate: string;
    CreatedBy: {
        Name: string;
    };
    Id: string;
    ParentId: string;
    Name: string;
    DeveloperName: string;
    Type: string;
    NamespacePrefix: string;
};
export declare type BaseFolderListMetadataOptions = BaseListMetadataOptions & {
    describeItem: DescribeMetadataItem[];
};
declare type FolderItem = {
    id: string;
    name: string;
};
export default abstract class BaseFolderListMetadata extends BaseListMetadata {
    protected folderRecordsByMetadataType: Record<string, FolderRecord[]>;
    protected readonly describeItem: DescribeMetadataItem[];
    folderNameMap: Record<string, string>;
    constructor({ describeItem, ...baseOptions }: BaseFolderListMetadataOptions);
    protected request<T>(query: string): Promise<T[]>;
    protected queryFoldersRecords(type: MetadataType): Promise<void>;
    protected getIdPathMap(type: MetadataType): Record<string, string>;
    protected getPath(id: string, parentFolderMap: Record<string, string>, folderItemsMap: Record<string, FolderItem>, path?: string[]): string;
    protected listMetadataFolder(describeItem: DescribeMetadataItem): Promise<MetadataItemData[]>;
}
export {};
