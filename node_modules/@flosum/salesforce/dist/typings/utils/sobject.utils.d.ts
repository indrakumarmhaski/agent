import { AxiosInstance, AxiosRequestConfig } from 'axios';
import { DescribeObject } from '../interfaces/describe.interfaces';
import { SortDirection } from '../enums';
export default class SObjectUtils {
    static isBig(name: string): boolean;
    static isExternal(name: string): boolean;
    static isCustomMetadataType(name: string): boolean;
    static isHistoricalData(name: string): boolean;
    static isBinaryObject(objectDescribe: DescribeObject): boolean;
    static isTag(name: string): boolean;
    static isFeedEntity(associateEntityType: string): boolean;
    static isHistoryEntity(associateEntityType: string): boolean;
    static isShareEntity(associateEntityType: string): boolean;
    static isIndexedByIdStandard(name: string): boolean;
    static isRequiredFilterByParent(name: string): boolean;
    static getDetailsRequiredFilterByParent(name: string): {
        field: string;
        parentObject: string;
    };
    static isRequiredFilterInChild(name: string): boolean;
    /**
     * @returns object's names that are indexable by Id field
     */
    static fetchObjectsIndexableById(instance: AxiosInstance, config: AxiosRequestConfig, objectsNames: string[], api: string): Promise<string[]>;
    private static createSubRequestsForObjectsIndexableById;
    static fetchIndexField(instance: AxiosInstance, objectName: string, api: string): Promise<{
        field: string;
        direction: SortDirection;
    }[]>;
    static isPersonAccountEnabled(axiosInstance: AxiosInstance, apiVersion: string): Promise<boolean>;
}
