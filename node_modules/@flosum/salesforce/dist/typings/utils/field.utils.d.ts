import { FieldType } from '../enums/field-type.enum';
import { DescribeObject } from '../interfaces/describe.interfaces';
import { AxiosInstance } from 'axios';
export default class FieldUtils {
    static isPersonAccount(fieldName: string): boolean;
    static isBusinessAccount(fieldName: string): boolean;
    static isReference(type: FieldType, relationshipOrder: number): boolean;
    static getBodyLengthField(objectName: string, binaryField: string): string;
    static isBodyLengthField(objectName: string, fieldName: string): boolean;
    static isCompound(fieldType: FieldType): boolean;
    static getCompound({ fields, name: objectName }: DescribeObject): Set<string>;
    static getSpecificNotUpsertable({ fields, name: objectName }: DescribeObject): Set<string>;
    /**
     * @param instance - Axios Instance
     * @param api - Salesforce api
     * @param mapObjectKey - Map of object key and object name {'001' => 'Account', '003' => 'Contact'}
     * @param ids - Salesforce id for check if exists or not
     */
    static getExistId(instance: AxiosInstance, api: string, mapObjectKey: Map<string, string>, ids: string[]): Promise<string[]>;
    /**
     * @param mapObjectKey - Map of object key and object name {'001' => 'Account', '003' => 'Contact'}
     * @param ids - Salesforce id for check if exists or not
     *
     * @return Map of object name and ids {'Account' => ['id1', 'id2'], 'Contact' => ['id1', 'id2']}
     */
    static getIdsByObjectName(mapObjectKey: Map<string, string>, ids: string[]): Map<string, string[]>;
}
