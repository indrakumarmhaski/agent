/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { loglevel, orgApiVersionFlagWithDeprecations, requiredOrgFlagWithDeprecations, SfCommand, } from '@salesforce/sf-plugins-core';
import { SubscriberPackageVersion } from '@salesforce/packaging';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-packaging', 'package_installed_list');
export class PackageInstalledListCommand extends SfCommand {
    static summary = messages.getMessage('summary');
    static examples = messages.getMessages('examples');
    static deprecateAliases = true;
    static aliases = ['force:package:installed:list'];
    static requiresProject = true;
    static flags = {
        loglevel,
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
    };
    async run() {
        const { flags } = await this.parse(PackageInstalledListCommand);
        const result = await SubscriberPackageVersion.installedList(flags['target-org'].getConnection(flags['api-version']));
        const records = result.map((record) => ({
            Id: record.Id,
            SubscriberPackageId: record.SubscriberPackageId,
            SubscriberPackageName: record.SubscriberPackage?.Name,
            SubscriberPackageNamespace: record.SubscriberPackage?.NamespacePrefix,
            SubscriberPackageVersionId: record.SubscriberPackageVersion?.Id,
            SubscriberPackageVersionName: record.SubscriberPackageVersion?.Name,
            SubscriberPackageVersionNumber: `${record.SubscriberPackageVersion?.MajorVersion}.${record.SubscriberPackageVersion?.MinorVersion}.${record.SubscriberPackageVersion?.PatchVersion}.${record.SubscriberPackageVersion?.BuildNumber}`,
        }));
        const tableOptions = {
            Id: { header: 'ID' },
            SubscriberPackageId: { header: 'Package ID' },
            SubscriberPackageName: { header: 'Package Name' },
            SubscriberPackageNamespace: { header: 'Namespace' },
            SubscriberPackageVersionId: { header: 'Package Version ID' },
            SubscriberPackageVersionName: { header: 'Version Name' },
            SubscriberPackageVersionNumber: { header: 'Version' },
        };
        this.table(records, tableOptions, { 'no-truncate': true });
        return records;
    }
}
//# sourceMappingURL=list.js.map