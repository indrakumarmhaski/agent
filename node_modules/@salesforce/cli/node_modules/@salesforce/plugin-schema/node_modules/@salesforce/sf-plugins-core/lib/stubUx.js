"use strict";
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stubPrompter = exports.stubSpinner = exports.stubSfCommandUx = exports.stubUx = void 0;
const sfCommand_1 = require("./sfCommand");
const ux_1 = require("./ux");
/**
 * Stub methods on the Ux class.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubUx } from '@salesforce/sf-plugins-core';
 * let stubUxStubs: ReturnType<typeof stubUx>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * stubUxStubs = stubUx($$.SANDBOX);
 *
 * // inside some test
 * expect(stubUxStubs.log.args.flat()).to.deep.include(`foo`);
 * ```
 *
 */
function stubUx(sandbox) {
    return {
        log: sandbox.stub(ux_1.Ux.prototype, 'log'),
        warn: sandbox.stub(ux_1.Ux.prototype, 'warn'),
        table: sandbox.stub(ux_1.Ux.prototype, 'table'),
        url: sandbox.stub(ux_1.Ux.prototype, 'url'),
        styledHeader: sandbox.stub(ux_1.Ux.prototype, 'styledHeader'),
        styledObject: sandbox.stub(ux_1.Ux.prototype, 'styledObject'),
        styledJSON: sandbox.stub(ux_1.Ux.prototype, 'styledJSON'),
    };
}
exports.stubUx = stubUx;
/**
 * Stub methods on the Ux class.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubSfCommandUx } from '@salesforce/sf-plugins-core';
 * let stubSfCommandUxStubs: ReturnType<typeof stubSfCommandUx>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * cmdStubs = stubSfCommandUx($$.SANDBOX);
 *
 * // inside some test
 * expect(cmdStubs.warn.args.flat()).to.deep.include(`foo`);
 * ```
 *
 */
function stubSfCommandUx(sandbox) {
    return {
        log: sandbox.stub(sfCommand_1.SfCommand.prototype, 'log'),
        logJson: sandbox.stub(sfCommand_1.SfCommand.prototype, 'logJson'),
        logToStderr: sandbox.stub(sfCommand_1.SfCommand.prototype, 'logToStderr'),
        logSuccess: sandbox.stub(sfCommand_1.SfCommand.prototype, 'logSuccess'),
        logSensitive: sandbox.stub(sfCommand_1.SfCommand.prototype, 'logSensitive'),
        info: sandbox.stub(sfCommand_1.SfCommand.prototype, 'info'),
        warn: sandbox.stub(sfCommand_1.SfCommand.prototype, 'warn'),
        table: sandbox.stub(sfCommand_1.SfCommand.prototype, 'table'),
        url: sandbox.stub(sfCommand_1.SfCommand.prototype, 'url'),
        styledHeader: sandbox.stub(sfCommand_1.SfCommand.prototype, 'styledHeader'),
        styledObject: sandbox.stub(sfCommand_1.SfCommand.prototype, 'styledObject'),
        styledJSON: sandbox.stub(sfCommand_1.SfCommand.prototype, 'styledJSON'),
    };
}
exports.stubSfCommandUx = stubSfCommandUx;
/**
 * Stub the SfCommand spinner.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubSpinner } from '@salesforce/sf-plugins-core';
 * let spinnerStubs: ReturnType<typeof stubSpinner>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * spinnerStubs = stubSpinner($$.SANDBOX);
 *
 * // inside some test
 * expect(spinnerStubs.callCount).equals(1);
 * ```
 *
 */
function stubSpinner(sandbox) {
    return {
        start: sandbox.stub(ux_1.Spinner.prototype, 'start'),
        stop: sandbox.stub(ux_1.Spinner.prototype, 'stop'),
    };
}
exports.stubSpinner = stubSpinner;
/**
 * Stub the SfCommand prompter.
 *
 * @example
 * ```
 * import { stubPrompter } from '@salesforce/sf-plugins-core';
 * let prompterStubs: ReturnType<typeof stubPrompter>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * prompterStubs = stubPrompter($$.SANDBOX);
 *
 * // inside some test
 * expect(prompterStubs.confirm.firstCall.args[0]).to.equal(
 *     messages.getMessage('confirmDelete', ['scratch', testOrg.username])
 *   );
 * ```
 *
 */
function stubPrompter(sandbox) {
    return {
        prompt: sandbox.stub(ux_1.Prompter.prototype, 'prompt'),
        confirm: sandbox.stub(ux_1.Prompter.prototype, 'confirm'),
        timedPrompt: sandbox.stub(ux_1.Prompter.prototype, 'timedPrompt'),
    };
}
exports.stubPrompter = stubPrompter;
//# sourceMappingURL=stubUx.js.map