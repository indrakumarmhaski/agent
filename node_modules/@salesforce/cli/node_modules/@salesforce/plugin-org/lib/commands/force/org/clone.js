/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Flags, SfCommand, requiredOrgFlagWithDeprecations, parseVarArgs, orgApiVersionFlagWithDeprecations, loglevel, } from '@salesforce/sf-plugins-core';
import { SfError, Lifecycle, Messages, OrgTypes, OrgConfigProperties, StateAggregator, SandboxEvents, Logger, } from '@salesforce/core';
import requestFunctions from '../../../shared/sandboxRequest.js';
import { SandboxReporter } from '../../../shared/sandboxReporter.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-org', 'clone');
export class OrgCloneCommand extends SfCommand {
    static examples = messages.getMessages('examples');
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static strict = false;
    static state = 'deprecated';
    static hidden = true;
    static deprecationOptions = {
        to: 'org:create:sandbox',
        version: '60.0',
    };
    static SANDBOXDEF_SRC_SANDBOXNAME = 'SourceSandboxName';
    static flags = {
        'target-org': requiredOrgFlagWithDeprecations,
        'api-version': orgApiVersionFlagWithDeprecations,
        type: Flags.custom({
            options: ['sandbox'],
        })({
            char: 't',
            summary: messages.getMessage('flags.type.summary'),
            required: true,
        }),
        definitionfile: Flags.file({
            char: 'f',
            exists: true,
            summary: messages.getMessage('flags.definitionfile.summary'),
        }),
        setdefaultusername: Flags.boolean({
            char: 's',
            summary: messages.getMessage('flags.setdefaultusername.summary'),
        }),
        setalias: Flags.string({
            char: 'a',
            summary: messages.getMessage('flags.setalias.summary'),
        }),
        wait: Flags.duration({
            unit: 'minutes',
            char: 'w',
            summary: messages.getMessage('flags.wait.summary'),
            description: messages.getMessage('flags.wait.description'),
            min: 2,
            defaultValue: 6,
        }),
        loglevel,
    };
    logger;
    async run() {
        const { flags, args, argv } = await this.parse(OrgCloneCommand);
        this.logger = await Logger.child(this.constructor.name);
        const varargs = parseVarArgs(args, argv);
        const lifecycle = Lifecycle.getInstance();
        if (flags.type === OrgTypes.Sandbox.toString()) {
            lifecycle.on(SandboxEvents.EVENT_ASYNC_RESULT, async (results) => 
            // Keep all console output in the command
            Promise.resolve(this.log(messages.getMessage('commandSuccess', [results.Id, this.config.bin, results.SandboxName]))));
            lifecycle.on(SandboxEvents.EVENT_STATUS, async (results) => Promise.resolve(this.log(SandboxReporter.sandboxProgress(results))));
            lifecycle.on(SandboxEvents.EVENT_RESULT, async (results) => {
                const { sandboxReadyForUse, data } = SandboxReporter.logSandboxProcessResult(results);
                this.log(sandboxReadyForUse);
                this.styledHeader('Sandbox Org Cloning Status');
                this.table(data, {
                    key: { header: 'Name' },
                    value: { header: 'Value' },
                });
                if (results?.sandboxRes?.authUserName) {
                    if (flags.setalias)
                        await this.setAlias(flags.setalias, results.sandboxRes.authUserName);
                    if (flags.setdefaultusername)
                        await this.setDefaultUsername(results.sandboxRes.authUserName);
                }
            });
            const { sandboxReq, srcSandboxName } = await requestFunctions.createSandboxRequest(true, flags.definitionfile, this.logger, varargs);
            this.logger.debug('Calling clone with SandboxRequest: %s and SandboxName: %s ', sandboxReq, srcSandboxName);
            flags['target-org'].getConnection(flags['api-version']);
            return flags['target-org'].cloneSandbox(sandboxReq, srcSandboxName, { wait: flags.wait });
        }
        else {
            throw new SfError(messages.getMessage('commandOrganizationTypeNotSupport', [OrgTypes.Sandbox]), messages.getMessage('commandOrganizationTypeNotSupportAction', [OrgTypes.Sandbox]));
        }
    }
    async setAlias(alias, username) {
        const stateAggregator = await StateAggregator.getInstance();
        stateAggregator.aliases.set(alias, username);
        const result = stateAggregator.aliases.getAll();
        this.logger.debug('Set Alias: %s result: %s', alias, result);
    }
    async setDefaultUsername(username) {
        const globalConfig = this.configAggregator.getGlobalConfig();
        globalConfig.set(OrgConfigProperties.TARGET_ORG, username);
        const result = await globalConfig.write();
        this.logger.debug('Set defaultUsername: %s result: %s', username, result);
    }
}
//# sourceMappingURL=clone.js.map