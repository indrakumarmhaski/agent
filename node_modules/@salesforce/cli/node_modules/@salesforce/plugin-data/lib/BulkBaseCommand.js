/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { SfCommand } from '@salesforce/sf-plugins-core';
import { Duration } from '@salesforce/kit';
import { capitalCase } from 'change-case';
import { Lifecycle, Messages } from '@salesforce/core';
import { getResultMessage } from './reporters.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulk.base.command');
export class BulkBaseCommand extends SfCommand {
    static enableJsonFlag = true;
    lifeCycle = Lifecycle.getInstance();
    job;
    connection;
    cache;
    isAsync = false;
    operation;
    endWaitTime = 0;
    wait = 0;
    numberRecordsProcessed = 0;
    numberRecordsFailed = 0;
    numberRecordSucceeded = 0;
    timeout = false;
    displayBulkV2Result(jobInfo) {
        if (this.isAsync) {
            this.logSuccess(messages.getMessage('success', [this.operation, jobInfo.id]));
            this.info(messages.getMessage('checkStatus', [
                this.config.bin,
                this.operation,
                jobInfo.id,
                this.connection?.getUsername(),
            ]));
        }
        else {
            this.log();
            this.info(getResultMessage(jobInfo));
            if ((jobInfo.numberRecordsFailed ?? 0) > 0 || jobInfo.state === 'Failed') {
                this.info(messages.getMessage('checkJobViaUi', [this.config.bin, this.connection?.getUsername(), jobInfo.id]));
                process.exitCode = 1;
            }
            if (jobInfo.state === 'InProgress' || jobInfo.state === 'Open') {
                this.info(messages.getMessage('checkStatus', [
                    this.config.bin,
                    this.operation,
                    jobInfo.id,
                    this.connection?.getUsername(),
                ]));
            }
            if (jobInfo.state === 'Failed') {
                throw messages.createError('bulkJobFailed', [jobInfo.id]);
            }
        }
    }
    setupLifecycleListeners() {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        this.job.on('jobProgress', async () => {
            const jobInfo = await this.job.check();
            this.numberRecordsProcessed = jobInfo.numberRecordsProcessed ?? 0;
            this.numberRecordsFailed = jobInfo.numberRecordsFailed ?? 0;
            this.numberRecordSucceeded = this.numberRecordsProcessed - this.numberRecordsFailed;
            this.spinner.status = `${this.getRemainingTimeStatus()}${this.getStage(jobInfo.state)}${this.getRemainingRecordsStatus()}`;
        });
        this.job.on('failed', (err) => {
            try {
                this.error(err);
            }
            finally {
                this.spinner.stop();
            }
        });
        this.job.on('error', (message) => {
            try {
                this.error(message);
            }
            finally {
                this.spinner.stop();
            }
        });
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        this.job.on('jobTimeout', async () => {
            if (!this.timeout) {
                this.timeout = true;
                await this.cache?.createCacheEntryForRequest(this.job.id ?? '', this.connection?.getUsername(), this.connection?.getApiVersion());
                this.displayBulkV2Result(await this.job.check());
            }
        });
    }
    getRemainingTimeStatus() {
        return this.isAsync
            ? ''
            : messages.getMessage('remainingTimeStatus', [Duration.milliseconds(this.endWaitTime - Date.now()).minutes]);
    }
    getRemainingRecordsStatus() {
        // the leading space is intentional
        return ` ${messages.getMessage('remainingRecordsStatus', [
            this.numberRecordSucceeded,
            this.numberRecordsFailed,
            this.numberRecordsProcessed,
        ])}`;
    }
    // eslint-disable-next-line class-methods-use-this
    getStage(state) {
        return ` Stage: ${capitalCase(state)}.`;
    }
}
//# sourceMappingURL=BulkBaseCommand.js.map