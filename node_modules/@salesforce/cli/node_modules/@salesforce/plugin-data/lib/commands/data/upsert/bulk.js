/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { Flags } from '@salesforce/sf-plugins-core';
import { BulkUpsertRequestCache } from '../../../bulkDataRequestCache.js';
import { BulkOperationCommand } from '../../../bulkOperationCommand.js';
import { validateSobjectType } from '../../../bulkUtils.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulkv2.upsert');
export default class Upsert extends BulkOperationCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = {
        'external-id': Flags.string({
            char: 'i',
            summary: messages.getMessage('flags.external-id.summary'),
            required: true,
            aliases: ['externalid'],
            deprecateAliases: true,
        }),
    };
    async run() {
        const { flags } = await this.parse(Upsert);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        await validateSobjectType(flags.sobject, conn);
        return this.runBulkOperation(flags.sobject, flags.file, conn, flags.async ? 0 : flags.wait?.minutes, flags.verbose, 'upsert', {
            extIdField: flags['external-id'],
        });
    }
    // eslint-disable-next-line class-methods-use-this
    async getCache() {
        return BulkUpsertRequestCache.create();
    }
}
//# sourceMappingURL=bulk.js.map