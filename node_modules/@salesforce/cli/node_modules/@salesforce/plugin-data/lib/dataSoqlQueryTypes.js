/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
export var FieldType;
(function (FieldType) {
    FieldType[FieldType["field"] = 0] = "field";
    FieldType[FieldType["subqueryField"] = 1] = "subqueryField";
    FieldType[FieldType["functionField"] = 2] = "functionField";
})(FieldType || (FieldType = {}));
/** element: a field value from the sobject.  Empty arrays return true */
export const hasNestedRecords = (element) => Array.isArray(element?.records);
/** element: a field value from the sobject.  Empty arrays return false */
export const hasNonEmptyNestedRecords = (element) => hasNestedRecords(element) && element.records.length > 0;
/** convenience method for filtering Object.entries array */
export const hasNestedRecordsFilter = (entry) => typeof entry[0] === 'string' && hasNonEmptyNestedRecords(entry[1]);
export const isAttributesElement = (element) => !!element.referenceId && !!element.type;
/** convenience method for filtering Object.entries array */
export const isAttributesEntry = (entry) => entry[0] === 'attributes' && isAttributesElement(entry[1]);
//# sourceMappingURL=dataSoqlQueryTypes.js.map