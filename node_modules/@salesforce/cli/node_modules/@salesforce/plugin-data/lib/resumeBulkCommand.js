/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Flags, loglevel, optionalOrgFlagWithDeprecations } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core';
import { isBulkV2RequestDone, transformResults, waitOrTimeout } from './bulkUtils.js';
import { BulkBaseCommand } from './BulkBaseCommand.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulk.resume.command');
export class ResumeBulkCommand extends BulkBaseCommand {
    static baseFlags = {
        'target-org': { ...optionalOrgFlagWithDeprecations, summary: messages.getMessage('flags.targetOrg.summary') },
        'job-id': Flags.salesforceId({
            length: 18,
            char: 'i',
            startsWith: '750',
            summary: messages.getMessage('flags.jobid'),
            aliases: ['jobid'],
            deprecateAliases: true,
        }),
        'use-most-recent': Flags.boolean({
            summary: messages.getMessage('flags.useMostRecent.summary'),
            default: true,
            exclusive: ['job-id'],
        }),
        wait: Flags.duration({
            summary: messages.getMessage('flags.wait.summary'),
            unit: 'minutes',
            min: 0,
            defaultValue: 0,
        }),
        'api-version': Flags.orgApiVersion(),
        loglevel,
    };
    async resume(resumeOptions, wait) {
        this.spinner.start('Getting status');
        const conn = resumeOptions.options.connection;
        this.job = conn.bulk2.job({ id: resumeOptions.jobInfo.id });
        this.wait = wait.milliseconds;
        this.endWaitTime = Date.now() + wait.milliseconds;
        this.spinner.status = this.getRemainingTimeStatus();
        this.setupLifecycleListeners();
        await waitOrTimeout(this.job, wait.milliseconds);
        const jobInfo = await this.job.check();
        this.spinner.stop();
        this.displayBulkV2Result(jobInfo);
        const result = { jobInfo };
        if (!isBulkV2RequestDone(jobInfo) || !this.jsonEnabled()) {
            return result;
        }
        result.records = transformResults(await this.job.getAllResults());
        return result;
    }
}
//# sourceMappingURL=resumeBulkCommand.js.map