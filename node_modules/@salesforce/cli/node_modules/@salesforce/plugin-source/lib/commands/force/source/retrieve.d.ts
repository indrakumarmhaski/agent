import { Duration } from '@salesforce/kit';
import { RetrieveResult } from '@salesforce/source-deploy-retrieve';
import { SourceTracking } from '@salesforce/source-tracking';
import { Interfaces } from '@oclif/core';
import { SourceCommand } from '../../../sourceCommand.js';
import { RetrieveCommandResult } from '../../../formatters/retrieveResultFormatter.js';
export declare class Retrieve extends SourceCommand {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly requiresProject = true;
    static readonly state = "deprecated";
    static readonly hidden = true;
    static readonly deprecationOptions: {
        to: string;
        message: string;
    };
    static readonly flags: {
        'api-version': {
            char: Interfaces.AlphabetLowercase;
            name: string;
            summary?: string | undefined;
            description?: string | undefined;
            helpLabel?: string | undefined;
            helpGroup?: string | undefined;
            env?: string | undefined;
            hidden?: boolean | undefined;
            required?: boolean | undefined;
            dependsOn?: string[] | undefined;
            exclusive?: string[] | undefined;
            exactlyOne?: string[] | undefined;
            relationships?: import("@oclif/core/lib/interfaces/parser.js").Relationship[] | undefined;
            deprecated?: true | Interfaces.Deprecation | undefined;
            aliases?: string[] | undefined;
            charAliases?: (Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase)[] | undefined;
            deprecateAliases?: boolean | undefined;
            noCacheDefault?: boolean | undefined;
            type: "option";
            helpValue?: string | undefined;
            options?: readonly string[] | undefined;
            multiple?: boolean | undefined;
            multipleNonGreedy?: boolean | undefined;
            delimiter?: "," | undefined;
            allowStdin?: boolean | "only" | undefined;
            parse: import("@oclif/core/lib/interfaces/parser.js").FlagParser<string | undefined, string, Interfaces.CustomOptions>;
            defaultHelp?: import("@oclif/core/lib/interfaces/parser.js").FlagDefaultHelp<string | undefined, Interfaces.CustomOptions>;
            input: string[];
            default?: import("@oclif/core/lib/interfaces/parser.js").FlagDefault<string | undefined, Interfaces.CustomOptions>;
        };
        loglevel: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'target-org': Interfaces.OptionFlag<import("@salesforce/core").Org, Interfaces.CustomOptions>;
        retrievetargetdir: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        sourcepath: Interfaces.OptionFlag<string[], Interfaces.CustomOptions>;
        wait: Interfaces.OptionFlag<Duration, Interfaces.CustomOptions>;
        manifest: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        metadata: Interfaces.OptionFlag<string[], Interfaces.CustomOptions>;
        packagenames: Interfaces.OptionFlag<string[], Interfaces.CustomOptions>;
        tracksource: Interfaces.BooleanFlag<boolean>;
        forceoverwrite: Interfaces.BooleanFlag<boolean>;
        verbose: Interfaces.BooleanFlag<boolean>;
    };
    protected readonly lifecycleEventNames: string[];
    protected retrieveResult: RetrieveResult;
    protected tracking: SourceTracking;
    private resolvedTargetDir;
    private flags;
    private registry;
    run(): Promise<RetrieveCommandResult>;
    protected preChecks(): Promise<void>;
    protected retrieve(): Promise<void>;
    protected resolveSuccess(): void;
    protected formatResult(): Promise<RetrieveCommandResult>;
    private maybeUpdateTracking;
    private wantsToRetrieveCustomFields;
    private moveResultsForRetrieveTargetDir;
    private overlapsPackage;
}
