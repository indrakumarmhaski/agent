import { Ux } from '@salesforce/sf-plugins-core';
import { ConfigAggregator } from '@salesforce/core';
import { CreateOutput } from '@salesforce/templates';
import { ForceGeneratorAdapter } from '@salesforce/templates/lib/utils/index.js';
import VisualforceComponentGenerator from '@salesforce/templates/lib/generators/visualforceComponentGenerator.js';
import VisualforcePageGenerator from '@salesforce/templates/lib/generators/visualforcePageGenerator.js';
import ApexClassGenerator from '@salesforce/templates/lib/generators/apexClassGenerator.js';
import LightningTestGenerator from '@salesforce/templates/lib/generators/lightningTestGenerator.js';
import StaticResourceGenerator from '@salesforce/templates/lib/generators/staticResourceGenerator.js';
import ProjectGenerator from '@salesforce/templates/lib/generators/projectGenerator.js';
import LightningInterfaceGenerator from '@salesforce/templates/lib/generators/lightningInterfaceGenerator.js';
import LightningAppGenerator from '@salesforce/templates/lib/generators/lightningAppGenerator.js';
import LightningEventGenerator from '@salesforce/templates/lib/generators/lightningEventGenerator.js';
import AnalyticsTemplateGenerator from '@salesforce/templates/lib/generators/analyticsTemplateGenerator.js';
import LightningComponentGenerator from '@salesforce/templates/lib/generators/lightningComponentGenerator.js';
import ApexTriggerGenerator from '@salesforce/templates/lib/generators/apexTriggerGenerator.js';
export type generatorInputs = {
    ux: Ux;
    templates?: string;
} & ({
    generator: typeof VisualforcePageGenerator;
    opts: typeof VisualforcePageGenerator.default.prototype.options;
} | {
    generator: typeof ApexClassGenerator;
    opts: typeof ApexClassGenerator.default.prototype.options;
} | {
    generator: typeof ApexTriggerGenerator;
    opts: typeof ApexTriggerGenerator.default.prototype.options;
} | {
    generator: typeof VisualforceComponentGenerator;
    opts: typeof VisualforceComponentGenerator.default.prototype.options;
} | {
    generator: typeof LightningTestGenerator;
    opts: typeof LightningTestGenerator.default.prototype.options;
} | {
    generator: typeof StaticResourceGenerator;
    opts: typeof StaticResourceGenerator.default.prototype.options;
} | {
    generator: typeof ProjectGenerator;
    opts: typeof ProjectGenerator.default.prototype.options;
} | {
    generator: typeof LightningInterfaceGenerator;
    opts: typeof LightningInterfaceGenerator.default.prototype.options;
} | {
    generator: typeof LightningAppGenerator;
    opts: typeof LightningAppGenerator.default.prototype.options;
} | {
    generator: typeof LightningEventGenerator;
    opts: typeof LightningEventGenerator.default.prototype.options;
} | {
    generator: typeof AnalyticsTemplateGenerator;
    opts: typeof AnalyticsTemplateGenerator.default.prototype.options;
} | {
    generator: typeof LightningComponentGenerator;
    opts: typeof LightningComponentGenerator.default.prototype.options;
});
export declare function runGenerator({ ux, templates, generator, opts }: generatorInputs): Promise<CreateOutput>;
export declare const getCustomTemplates: (configAggregator: ConfigAggregator) => string | undefined;
export declare const buildJson: (adapter: ForceGeneratorAdapter, targetDir: string) => CreateOutput;
