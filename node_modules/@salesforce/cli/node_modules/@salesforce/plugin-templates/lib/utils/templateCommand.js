/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import path from 'node:path';
import { Messages, OrgConfigProperties } from '@salesforce/core';
import { TemplateService } from '@salesforce/templates';
import yeoman from 'yeoman-environment';
import { ForceGeneratorAdapter } from '@salesforce/templates/lib/utils/index.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-templates', 'messages');
export async function runGenerator({ ux, templates, generator, opts }) {
    if (templates) {
        await TemplateService.getInstance().setCustomTemplatesRootPathOrGitRepo(templates);
    }
    const adapter = new ForceGeneratorAdapter();
    // @ts-expect-error the adapter doesn't fully implement the yeoman adapter interface
    const env = yeoman.createEnv(undefined, undefined, adapter);
    // @ts-ignore - access the default via the .default because of how we have to import everything above
    env.registerStub(generator.default, 'generator');
    await env.run('generator', opts);
    const targetDir = path.resolve(opts.outputdir ?? '.');
    ux.log(messages.getMessage('TargetDirOutput', [targetDir]));
    ux.log(adapter.log.getOutput());
    return buildJson(adapter, targetDir);
}
export const getCustomTemplates = (configAggregator) => {
    try {
        // we're still accessing the old `customOrgMetadataTemplates` key, but this is deprecated and we'll use the new key to access the value
        return configAggregator.getPropertyValue(OrgConfigProperties.ORG_CUSTOM_METADATA_TEMPLATES);
    }
    catch (err) {
        return undefined;
    }
};
// exported for test
export const buildJson = (adapter, targetDir) => {
    const cleanOutput = adapter.log.getCleanOutput();
    const rawOutput = `target dir = ${targetDir}\n${adapter.log.getOutput()}`;
    return {
        outputDir: targetDir,
        created: cleanOutput,
        rawOutput,
    };
};
//# sourceMappingURL=templateCommand.js.map