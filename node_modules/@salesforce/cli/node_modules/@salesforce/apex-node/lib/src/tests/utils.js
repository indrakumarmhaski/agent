"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryAll = exports.queryNamespaces = exports.stringify = exports.calculatePercentage = exports.isValidApexClassID = exports.isValidTestRunID = void 0;
const constants_1 = require("./constants");
function isValidTestRunID(testRunId) {
    return ((testRunId.length === 15 || testRunId.length === 18) &&
        testRunId.startsWith(constants_1.TEST_RUN_ID_PREFIX));
}
exports.isValidTestRunID = isValidTestRunID;
function isValidApexClassID(apexClassId) {
    return ((apexClassId.length === 15 || apexClassId.length === 18) &&
        apexClassId.startsWith(constants_1.CLASS_ID_PREFIX));
}
exports.isValidApexClassID = isValidApexClassID;
function calculatePercentage(dividend, divisor) {
    let percentage = '0%';
    if (dividend > 0) {
        const calcPct = ((dividend / divisor) * 100).toFixed();
        percentage = `${calcPct}%`;
    }
    return percentage;
}
exports.calculatePercentage = calculatePercentage;
function stringify(jsonObj) {
    return JSON.stringify(jsonObj, null, 2);
}
exports.stringify = stringify;
async function queryNamespaces(connection) {
    const installedNsQuery = 'SELECT NamespacePrefix FROM PackageLicense';
    const installedNsPromise = connection.query(installedNsQuery);
    const orgNsQuery = 'SELECT NamespacePrefix FROM Organization';
    const orgNsPromise = connection.query(orgNsQuery);
    const allNamespaces = await Promise.all([installedNsPromise, orgNsPromise]);
    const installedNamespaces = allNamespaces[0].records.map((record) => {
        return { installedNs: true, namespace: record.NamespacePrefix };
    });
    const orgNamespaces = allNamespaces[1].records.map((record) => {
        return { installedNs: false, namespace: record.NamespacePrefix };
    });
    return [...orgNamespaces, ...installedNamespaces];
}
exports.queryNamespaces = queryNamespaces;
const queryAll = async (connection, query, tooling = false) => {
    const conn = tooling ? connection.tooling : connection;
    const allRecords = [];
    let result = await conn.query(query);
    allRecords.push(...result.records);
    while (!result.done) {
        result = (await conn.queryMore(result.nextRecordsUrl));
        allRecords.push(...result.records);
    }
    return {
        done: true,
        totalSize: allRecords.length,
        records: allRecords
    };
};
exports.queryAll = queryAll;
//# sourceMappingURL=utils.js.map