/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Help, toConfiguredId } from '@oclif/core';
import stripAnsi from 'strip-ansi';
import chalk from 'chalk';
import { SfCommandHelp } from './sfCommandHelp.js';
export default class SfHelp extends Help {
    constructor() {
        super(...arguments);
        this.CommandHelpClass = SfCommandHelp;
        this.showShortHelp = false;
        this.commands = [];
    }
    async showHelp(argv) {
        this.showShortHelp = argv.includes('-h');
        this.commands = this.config.commandIDs.map((c) => `${this.config.bin} ${toConfiguredId(c, this.config)}`);
        return super.showHelp(argv);
    }
    getCommandHelpClass(command) {
        this.commandHelpClass = super.getCommandHelpClass(command);
        this.commandHelpClass.showShortHelp = this.showShortHelp;
        return this.commandHelpClass;
    }
    log(...args) {
        const formatted = args.map((arg) => {
            for (const cmd of this.commands) {
                /**
                 * This regex matches any command in the help output.
                 * It will continue to match until the next space, quote, or period.
                 *
                 * Examples that will match:
                 * - sf deploy project start
                 * - "sf deploy project start"
                 * - sf org create scratch|sandbox
                 * - "sf org create scratch|sandbox"
                 */
                const regex = new RegExp(`${cmd}([^\\s".]+)?`, 'g');
                const [match] = stripAnsi(arg.slice()).match(regex) ?? [];
                if (match) {
                    arg = arg.replace(regex, chalk.dim(match));
                }
            }
            return arg;
        });
        super.log(...formatted);
    }
}
//# sourceMappingURL=sfHelp.js.map